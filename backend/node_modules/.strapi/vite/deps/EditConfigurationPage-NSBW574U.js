import {
  ConfigurationForm,
  TEMP_FIELD_NAME
} from "./chunk-7VIRHX6B.js";
import "./chunk-25ZR4HQ4.js";
import "./chunk-JWZ5ZQPW.js";
import {
  useTypedSelector
} from "./chunk-EIQER7VZ.js";
import "./chunk-LLFPFWXZ.js";
import {
  setIn,
  useDoc,
  useDocLayout,
  useGetInitialDataQuery,
  useUpdateContentTypeConfigurationMutation
} from "./chunk-BATQ6P7P.js";
import "./chunk-PVDQZ2T6.js";
import "./chunk-HIZVCZYI.js";
import "./chunk-MCBSR63A.js";
import "./chunk-WP7OXHNL.js";
import "./chunk-FNBZHGRZ.js";
import "./chunk-KIP2OT74.js";
import "./chunk-FEXMW7RT.js";
import "./chunk-D7NMBJCP.js";
import "./chunk-REZOHTCL.js";
import "./chunk-QIJGNK42.js";
import "./chunk-TTBSBOZQ.js";
import "./chunk-QPY6ZNZQ.js";
import "./chunk-CJQOQ7FQ.js";
import "./chunk-7OMNL6RY.js";
import "./chunk-QCUGSABE.js";
import "./chunk-ZHGAJWWH.js";
import "./chunk-7ZTOKEWE.js";
import "./chunk-RVXRLLW4.js";
import "./chunk-MCDSVZI7.js";
import "./chunk-SJ7KA2FT.js";
import "./chunk-T5SCAYKP.js";
import "./chunk-MRF3ZLMV.js";
import "./chunk-CRCDDDSF.js";
import "./chunk-S5FMW2DI.js";
import "./chunk-KF4GARXL.js";
import "./chunk-HRRD5QIQ.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-ZEF4I2G4.js";
import "./chunk-K65KIEAL.js";
import "./chunk-INCZXFSB.js";
import "./chunk-AXQI4PSA.js";
import "./chunk-CZOPQMIC.js";
import "./chunk-ZXLM6UYO.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-S7WBP6BH.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-URQZRMKD.js";
import "./chunk-XKL5C7MW.js";
import {
  useTracking
} from "./chunk-VBYBCKQB.js";
import "./chunk-WI3RJ7VQ.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import {
  Page,
  useAPIErrorHandler
} from "./chunk-J4PCJCRU.js";
import "./chunk-2JMO32LK.js";
import "./chunk-L67CSQ3J.js";
import {
  useNotification
} from "./chunk-KNPP7ESK.js";
import "./chunk-L2GLRB5H.js";
import "./chunk-XOT3BPWW.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  useIntl
} from "./chunk-KKV5COBZ.js";
import "./chunk-5ZC4PE57.js";
import "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import "./chunk-ZPT5UDAZ.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-3CQBCJ3G.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-manager/dist/admin/pages/EditConfigurationPage.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var EditConfigurationPage = () => {
  const { trackUsage } = useTracking();
  const { formatMessage } = useIntl();
  const { toggleNotification } = useNotification();
  const { _unstableFormatAPIError: formatAPIError } = useAPIErrorHandler();
  const { isLoading: isLoadingSchema, schema, model } = useDoc();
  const { isLoading: isLoadingLayout, error, list, edit } = useDocLayout();
  const { fieldSizes, error: errorFieldSizes, isLoading: isLoadingFieldSizes, isFetching: isFetchingFieldSizes } = useGetInitialDataQuery(void 0, {
    selectFromResult: (res) => {
      var _a;
      const fieldSizes2 = Object.entries(((_a = res.data) == null ? void 0 : _a.fieldSizes) ?? {}).reduce((acc, [attributeName, { default: size }]) => {
        acc[attributeName] = size;
        return acc;
      }, {});
      return {
        isFetching: res.isFetching,
        isLoading: res.isLoading,
        error: res.error,
        fieldSizes: fieldSizes2
      };
    }
  });
  React.useEffect(() => {
    if (errorFieldSizes) {
      toggleNotification({
        type: "danger",
        message: formatAPIError(errorFieldSizes)
      });
    }
  }, [
    errorFieldSizes,
    formatAPIError,
    toggleNotification
  ]);
  const isLoading = isLoadingSchema || isLoadingLayout || isLoadingFieldSizes || isFetchingFieldSizes;
  const [updateConfiguration] = useUpdateContentTypeConfigurationMutation();
  const handleSubmit = async (data) => {
    try {
      trackUsage("willSaveContentTypeLayout");
      const meta = Object.entries(list.metadatas).reduce((acc, [name, { mainField: _mainField, ...listMeta }]) => {
        const existingEditMeta = edit.metadatas[name];
        const { __temp_key__, size: _size, name: _name, ...editedMetadata } = data.layout.flatMap((row) => row.children).find((field) => field.name === name) ?? {};
        acc[name] = {
          edit: {
            ...existingEditMeta,
            ...editedMetadata
          },
          list: listMeta
        };
        return acc;
      }, {});
      const res = await updateConfiguration({
        layouts: {
          edit: data.layout.map((row) => row.children.reduce((acc, { name, size }) => {
            if (name !== TEMP_FIELD_NAME) {
              return [
                ...acc,
                {
                  name,
                  size
                }
              ];
            }
            return acc;
          }, [])),
          list: list.layout.map((field) => field.name)
        },
        settings: setIn(data.settings, "displayName", void 0),
        metadatas: meta,
        uid: model
      });
      if ("data" in res) {
        trackUsage("didEditEditSettings");
        toggleNotification({
          type: "success",
          message: formatMessage({
            id: "notification.success.saved",
            defaultMessage: "Saved"
          })
        });
      } else {
        toggleNotification({
          type: "danger",
          message: formatAPIError(res.error)
        });
      }
    } catch {
      toggleNotification({
        type: "danger",
        message: formatMessage({
          id: "notification.error",
          defaultMessage: "An error occurred"
        })
      });
    }
  };
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Page.Loading, {});
  }
  if (errorFieldSizes || error || !schema) {
    return (0, import_jsx_runtime.jsx)(Page.Error, {});
  }
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, {
    children: [
      (0, import_jsx_runtime.jsx)(Page.Title, {
        children: `Configure ${edit.settings.displayName} Edit View`
      }),
      (0, import_jsx_runtime.jsx)(ConfigurationForm, {
        onSubmit: handleSubmit,
        attributes: schema.attributes,
        fieldSizes,
        layout: edit
      })
    ]
  });
};
var ProtectedEditConfigurationPage = () => {
  const permissions = useTypedSelector((state) => {
    var _a;
    return (_a = state.admin_app.permissions.contentManager) == null ? void 0 : _a.collectionTypesConfigurations;
  });
  return (0, import_jsx_runtime.jsx)(Page.Protect, {
    permissions,
    children: (0, import_jsx_runtime.jsx)(EditConfigurationPage, {})
  });
};
export {
  EditConfigurationPage,
  ProtectedEditConfigurationPage
};
//# sourceMappingURL=EditConfigurationPage-NSBW574U.js.map
